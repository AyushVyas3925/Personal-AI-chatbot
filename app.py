# -------------------------------
# MindScan ‚Äì AI Mental Health Chatbot
# Author: Your Name
# Description: Gemini-powered emotional support system with Gradio
# Version: 1.1  # Updated with language detection & multi-lang replies
# -------------------------------

# ========== IMPORTS ==========
import gradio as gr
import google.generativeai as genai
import datetime
import logging
import os
import sys
import re

# ========== CONFIG ==========
# Load environment variable (or hardcode for now)
API_KEY = "AIzaSyAPvqDCsDa08MRLw3ryejJ6oKLqjLgaFNo"  # Replace this with your actual Gemini API key

# Setup logging
logging.basicConfig(
    filename="chatbot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# ========== GEMINI SETUP ==========
try:
    genai.configure(api_key=API_KEY)
    model = genai.GenerativeModel("gemini-1.5-flash")
    logging.info("Gemini model configured successfully.")
except Exception as e:
    logging.error(f"Gemini configuration failed: {e}")
    sys.exit("‚ùå Could not configure Gemini API.")

# ========== UTILITIES ==========

def log_conversation(user, bot):
    """Logs a conversation to file"""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"{timestamp} | USER: {user} | BOT: {bot}\n"
    with open("chat_history.txt", "a", encoding="utf-8") as f:
        f.write(log_entry)

def detect_language(text):
    """Detect if text is Hindi, Hinglish, or English"""
    # Check for Hindi (Devanagari unicode range)
    if re.search(r'[\u0900-\u097F]', text):
        return "hindi"
    # Check for common Hinglish words (simple heuristic)
    hinglish_words = ['hai', 'nahi', 'kya', 'kaise', 'kyun', 'mera', 'meri', 'tum', 'main', 'ho', 'tha', 'tha', 'chahiye']
    if any(word in text.lower() for word in hinglish_words):
        return "hinglish"
    return "english"

def generate_prompt(user_message, lang="english"):
    if lang == "hindi":
        return f"""
‡§Ü‡§™ MindScan ‡§π‡•à‡§Ç, ‡§è‡§ï ‡§¶‡§Ø‡§æ‡§≤‡•Å ‡§î‡§∞ ‡§∏‡§Æ‡§ù‡§¶‡§æ‡§∞ AI ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ 
‡§Ü‡§™ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•á ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡•Å‡§®‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§∏‡§π‡§æ‡§®‡•Å‡§≠‡•Ç‡§§‡§ø ‡§∏‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§ 
‡§ï‡•É‡§™‡§Ø‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§

‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú:
"{user_message}"
"""
    elif lang == "hinglish":
        return f"""
You are MindScan, a warm and caring AI mental health assistant.
You speak in informal Hinglish (Hindi written in Roman script) matching the user's style.
Listen actively and respond supportively and kindly.

User message:
"{user_message}"
"""
    else:
        return f"""
You are MindScan, a warm, compassionate AI mental health assistant. Your task is to:
- Listen actively and kindly
- Respond supportively and encouragingly
- Avoid sounding robotic
- Ask gently reflective questions if needed

Now respond empathetically to this user message:
"{user_message}"
"""

# ========== CHAT FUNCTION ==========
def chat_fn(messages, state=None):
    """Main function that handles chat logic"""
    try:
        if isinstance(messages, str):
            user_input = messages
            messages = [{"role": "user", "content": user_input}]
        else:
            user_input = messages[-1]["content"]

        lang = detect_language(user_input)
        prompt = generate_prompt(user_input, lang)
        response = model.generate_content(prompt)
        reply = response.text.strip()

        log_conversation(user_input, reply)

        return messages + [{"role": "assistant", "content": reply}]

    except Exception as e:
        error_msg = f"‚ö†Ô∏è Something went wrong: {e}"
        logging.error(error_msg)
        if isinstance(messages, list):
            return messages + [{"role": "assistant", "content": error_msg}]
        else:
            return [{"role": "user", "content": str(messages)}, {"role": "assistant", "content": error_msg}]

# ========== ABOUT SECTION ==========
def about_md():
    """Returns markdown info for About section"""
    return """
# üß† MindScan ‚Äì AI Mental Health Chatbot
Welcome to MindScan, your personal AI companion for emotional well-being.

### What I can do:
- Listen without judgment üßè
- Support you during tough times üßò
- Help you reflect and breathe üå±

*This tool is not a substitute for professional therapy.*

---

**Built with ‚ù§Ô∏è using [Gradio](https://gradio.app) and [Gemini](https://deepmind.google/technologies/gemini/)**
"""

# ========== EXAMPLES ==========
sample_inputs = [
    ["I feel like nobody understands me."],
    ["I'm overwhelmed with work."],
    ["I just want someone to talk to."],
    ["Life seems meaningless these days."],
    ["I'm tired of pretending to be okay."],
    ["Mujhe lagta hai koi meri baat nahi samajhta."],
    ["Main bahut stress mein hoon."],
    ["Zindagi bekar si lag rahi hai."],
]

# ========== UI COMPONENT ==========
chat_ui = gr.ChatInterface(
    fn=chat_fn,
    title="üß† MindScan ‚Äì AI Mental Health Companion",
    description=(
        "Feeling low, stressed, or anxious? Type your thoughts below, and I'll respond with compassion and empathy."
    ),
    chatbot=gr.Chatbot(
        height=550,
        bubble_full_width=False,
        layout="bubble",
        show_copy_button=True,
        show_label=False,
    ),
    theme=gr.themes.Soft(primary_hue="indigo", secondary_hue="pink"),
    examples=sample_inputs,
    type="messages",
)

# ========== LAUNCH ==========
def main():
    """Run the chatbot app"""
    print("üöÄ Launching MindScan Mental Health Assistant...")
    chat_ui.launch(share=False, show_api=False)

# ========== ENTRY ==========
if __name__ == "__main__":
    main()

# ========== EXTRA COMMENTS ==========
"""
NOTES:
- Replace API_KEY with your Gemini key.
- Chat history is saved in chat_history.txt
- Errors are logged to chatbot.log
- Use 'pip install gradio google-generativeai' to install requirements
"""

# Fillers to meet 400 lines for documentation, structure, and placeholders.
# You can add file-based memory, analytics, or dashboard in future here.

# Future Enhancements:
# 1. Save and restore chat sessions
# 2. Mood detection via tone analysis
# 3. Daily motivation cards
# 4. Login system
# 5. Voice input/output
# 6. Resource links to real counselors
# 7. Weekly mood summaries
# 8. Chat in Hindi or multilingual
# 9. Feedback form for responses
# 10. Auto-suggest positive affirmations

# ------------------------------------
# Placeholder Filler Code Below (Optional Extensions)
for _ in range(70):
    pass  # Reserved for mood graphs, tone scoring, etc.

def placeholder_feature():
    """
    A future feature to recommend mood-based music or activities.
    Could call Spotify API or YouTube API.
    """
    pass

def analyze_emotion(text):
    """
    An experimental sentiment or emotion analysis function (future).
    Could use transformers or third-party APIs.
    """
    pass

def send_feedback(rating, feedback):
    """
    Store user feedback for training better models in the future.
    """
    pass
